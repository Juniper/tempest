
with_venv=tools/with_venv.sh

# Determinate is the given option present in the INI file
# ini_has_option config-file section option
function ini_has_option() {
    local file=$1
    local section=$2
    local option=$3
    local line
    line=$(sed -ne "/^\[$section\]/,/^\[.*\]/ { /^$option[ \t]*=/ p; }" "$file")
    [ -n "$line" ]
}


# Set an option in an INI file
# iniset config-file section option value
function iniset() {
    local file=$1
    local section=$2
    local option=$3
    local value=$4

    [[ -z $section || -z $option ]] && return

    if ! grep -q "^\[$section\]" "$file" 2>/dev/null; then
        # Add section at the end
        echo -e "\n[$section]" >>"$file"
    fi
    if ! ini_has_option "$file" "$section" "$option"; then
        # Add it
        sed -i -e "/^\[$section\]/ a\\
$option = $value
" "$file"
    else
        local sep=$(echo -ne "\x01")
        # Replace it
        sed -i -e '/^\['${section}'\]/,/^\[.*\]/ s'${sep}'^\('${option}'[ \t]*=[ \t]*\).*$'${sep}'\1'"${value}"${sep} "$file"
    fi
}


function get_image_id() {
    local keystone_host=http://glance.openstack.svc.cluster.local:80/
    local image_name=$2
    local image_path=$3
    images=`${with_venv} export OS_CLOUD=openstack_helm; openstack image list`
    #if grep -q $image_name $images; then
    if [[ "$images" == *\ ${image_name}\ * ]];then
        image_id=`${with_venv} export OS_CLOUD=openstack_helm; openstack image list | grep " $image_name "  | awk {'print $2'}`
    else
        image_filename=$(basename $image_path)
        if [ ! -f $image_filename ]; then
            `wget $image_path --no-check-certificate`
        fi
        #export OS_IMAGE_URL=${keystone_host} && ${with_venv} glance image-create --name $image_name --disk-format qcow2 --container-format bare --visibility public --file $image_filename > /dev/null
        export OS_IMAGE_URL=${keystone_host} && ${with_venv} export OS_CLOUD=openstack_helm;openstack image create --disk-format qcow2 --container-format bare --public --file $image_filename $image_name > /dev/null
        image_id=`${with_venv} nova image-list | grep " $image_name "  | awk {'print $2'}`
    fi
    echo $image_id
}

function create_endpoint() {
    local catalog_type=$1
    local url=$2
    service_id=`${with_venv} export OS_CLOUD=openstack_helm;openstack service list | grep $catalog_type | awk '{print $2}'`
    if [[ $service_id == "" ]]; then
        service_id=`${with_venv} openstack service create --name ${catalog_type} ${catalog_type} | grep id | awk '{print $4}'`
        #endpoint_id=`${with_venv} openstack endpoint create --region RegionOne --publicurl ${url}:8082 --adminurl ${url}:8082 --internalurl ${url}:8082 ${service_id}`
        endpoint_id=`${with_venv} openstack endpoint create --region RegionOne ${service_id} public ${url}:8082`
        endpoint_id=`${with_venv} openstack endpoint create --region RegionOne ${service_id} admin ${url}:8082`
        endpoint_id=`${with_venv} openstack endpoint create --region RegionOne ${service_id} internal ${url}:8082`
    fi
}

function create_project() {
    local project_name=$1
    keystone='openstack '
#    if [[ $AUTH_PROTOCOL -eq 'https' ]]; then
#        keystone='openstack --insecure'
#    else
#        keystone='openstack'
#    fi
    id=`${with_venv} ${keystone} project list | grep ' '$project_name' ' | awk '{print $2;}'`
    if [ -z "$id" ]; then
        ${with_venv} ${keystone} project create --enable $project_name
    fi
}

function sync_demo_project() {
    local api_host=$1
    local username=$2
    local password=$3
    keystone='openstack '
    id=`${with_venv} ${keystone} project show demo | grep id | awk '{print $4}' | sed 's/./&-/8' | sed 's/./&-/13' | sed 's/./&-/18' | sed 's/./&-/23'`
    if [ -z "$id" ]; then
        ${with_venv} ${keystone} project create --enable demo
        id=`${with_venv} ${keystone} project show demo | grep id | awk '{print $4}' | sed 's/./&-/8' | sed 's/./&-/13' | sed 's/./&-/18' | sed 's/./&-/23'`
    fi
    token=`${with_venv} openstack token issue | grep " id" | awk '{print $4}'`
    curl -H 'X-Auth-Token: '$token http://${api_host}:8082/project/${id}
}

function create_user() {
    local username=$1
    local password=$2
    local project_name=$3
    local role=$4
    keystone='openstack '
#    if [[ $AUTH_PROTOCOL -eq 'https' ]]; then
#        keystone='openstack --insecure'
#    else
#        keystone='openstack'
#    fi
    id=$(${with_venv} ${keystone} user list | grep " "$username  | awk '{print $2;}')
    if [ -z $id ]; then
        ${with_venv} ${keystone} user create --project $project_name --password $password --email $username@example.com $username
        ${with_venv} ${keystone} role add --user $username --project $project_name $role
    fi
}    

function create_network() {
    local vn_name=$1
    local subnet=$2
    if [[ $AUTH_PROTOCOL -eq 'https' ]]; then
        neutron='neutron --insecure'
    else
        neutron='neutron'
    fi
    if ${with_venv} ${neutron} net-show $vn_name >/dev/null 2>&1 ; then
        echo "$vn_name already present, not creating"
    else 
        ${with_venv} ${neutron} net-create $vn_name
        vn_id=`${with_venv} ${neutron} net-show $vn_name | grep " id " | awk {'print $4'}`
        ${with_venv} ${neutron} subnet-create $vn_id $subnet
    fi
}

function create_public_network() {
    local vn_name=$1
    local subnet=$2
    if [[ $AUTH_PROTOCOL -eq 'https' ]]; then
        neutron='neutron --insecure'
    else
        neutron='neutron'
    fi
    create_network $vn_name $subnet 
    ${with_venv} ${neutron} net-update $vn_name --router:external True
    sshpass -p $API_SERVER_HOST_PASSWORD ssh $SSHOPT ${API_SERVER_HOST_USER}@${API_SERVER_IP} "python /opt/contrail/utils/add_route_target.py --routing_instance_name $PUBLIC_NETWORK_RI_FQ_NAME --route_target_number $PUBLIC_NETWORK_RT --router_asn $ROUTER_ASN --api_server_ip $API_SERVER_IP --api_server_port 8082 --admin_user $OS_USERNAME --admin_password $OS_PASSWORD --admin_tenant_name $OS_TENANT_NAME" || echo "Unable to set route target on the public vn!!"
}

function create_flavor() {
    local id=$1
    local name="tempest_flavor_$id"
    local ram=${2:-512}
    local disk=${3:-1}
    local vCPU=${4:-1}
    if [[ $AUTH_PROTOCOL -eq 'https' ]]; then
        nova='nova --insecure'
    else
        nova='nova'
    fi
    if ${with_venv} ${nova} flavor-show $id >/dev/null 2>&1 ; then
        echo "flavor $id already present, not creating"
    else
        ${with_venv} ${nova} flavor-create $name $id $ram $disk $vCPU
    fi
}

function get_compute_count() {
    count=`nova service-list | grep "nova-compute" | grep "up" | wc -l`
    echo $count
}
    
